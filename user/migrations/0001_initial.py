# Generated by Django 3.1.5 on 2021-01-09 09:19

import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.URLField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=32, verbose_name='Group Name')),
                ('description', models.TextField(blank=True, max_length=250, verbose_name='Group Description')),
                ('classification',
                 models.IntegerField(choices=[(0, 'Private'), (1, 'Public'), (2, 'Business')], default=0)),
                ('last_activity_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-last_activity_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without '
                                                               'explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and '
                                                        '@/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as '
                                                            'active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image_url', models.URLField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number',
                 phonenumber_field.modelfields.PhoneNumberField(db_index=True, default=None, max_length=128,
                                                                region=None, unique=True)),
                ('visibility',
                 models.IntegerField(choices=[(0, 'Invisible'), (1, 'Contacts Only'), (2, 'All')], default=0)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('blocked_users',
                 models.ManyToManyField(blank=True, related_name='_user_blocked_users_+', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(related_name='users', to='auth.Group')),
                ('user_groups', models.ManyToManyField(blank=True, related_name='users', to='user.UserGroup')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
